<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on moskomule log</title>
    <link>http://mosko.tokyo/post/</link>
    <description>Recent content in Posts on moskomule log</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Written by Ryuichiro Hataya</copyright>
    <lastBuildDate>Sat, 28 Jan 2017 07:31:45 +0900</lastBuildDate>
    
	<atom:link href="http://mosko.tokyo/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PyTorchでテキスト生成</title>
      <link>http://mosko.tokyo/post/pytorch_text_generation/</link>
      <pubDate>Sat, 28 Jan 2017 07:31:45 +0900</pubDate>
      
      <guid>http://mosko.tokyo/post/pytorch_text_generation/</guid>
      <description>相変わらずPyTorchをいじっている．後発のこともあって，まだDocは完全ではないけれど，Discussionなどのサポート体制は充実している(気がする)．
コミュニティの助けを借りてRNNでのテキスト生成をおこなった．これはKerasのサンプルをPyTorchで書き換えたもので時流に乗ってオーウェルの 1984 を学習する．Kerasのように内部状態を特に考える必要がないのとは異なって，隠れ変数$h_{\star}$を意識しなくてはいけないので勉強になる．
 function var: CUDAが使えればtorch.autograd.VariableをGPUにおく(variable.cuda())．
 function sample: RNNモデルの出力から適当なindexを取り出す．
 function __init__ in class Net: inputはfeature数で，今回であればアルファベットをonehotにしているので，len(chars)．
  def __init__(self, features, cls_size): super(Net, self).__init__() self.rnn1 = nn.GRU(input_size=features, hidden_size=hidden_size, num_layers=1) self.dense1 = nn.Linear(hidden_size, cls_size)   function forward in class Net: 系列の最後の入力に対する隠れ層の状態をとるためにx=select(0, maxlen-1)を行っている(追記:実はx[-1]で充分)．reshapeに相当するviewを行うためにはcontiguousが必要．またテンソルxは$\text{系列の長さ}\times\text{バッチ数}\times\text{feature数}$である点に注意．  def forward(self, x, hidden): x, hidden = self.rnn1(x, hidden) x = x.select(0, maxlen-1).contiguous() x = x.view(-1, hidden_size) x = F.softmax(self.dense1(x)) return x, hidden   function train: 入力した文を1通り読み込むのを1エポックにしている．Kerasと異なり，PyTorchのCrossEntropyLossではtargetはクラスのインデックスである．この目標のインデクス配列の型はnp.</description>
    </item>
    
    <item>
      <title>PyTorchはじめ</title>
      <link>http://mosko.tokyo/post/getting_started_pytorch/</link>
      <pubDate>Tue, 24 Jan 2017 15:15:55 +0900</pubDate>
      
      <guid>http://mosko.tokyo/post/getting_started_pytorch/</guid>
      <description>先日Facebookが PyTorch を公開していたので，早速試してみた．PyTorchは
 Tensors and Dynamic neural networks in Python with strong GPU acceleration.
 とのことで，TensorFlowやTheanoより，Chainerに似ている気がする．後発ということもあってか，ウェブページにある導入の説明が丁寧で，Linux，Python 3.5，conda，Cuda8.0なら
conda install pytorch torchvision cuda80 -c soumith  を叩くだけでよい．その下にはMNISTなどの例やJupyterのチュートリアルへのリンクがあるのも丁寧．ただ，ニューラルネットワークの知識に乏しくともレイヤーを重ねてscikit-learn風によしなにすればよいkerasよりは難しいが，その分柔軟に書けそう．メモリを大量消費するTensorFlowに較べて，GPUに対する負荷はかなり小さそう．
基本的にはnn.Moduleを継承してネットワークを定義する． 以下のコードはGithubに挙げた．
class Net(nn.Module): def __init__(self): super(Net, self).__init__() self.conv1 = nn.Conv2d(in_channels=1, out_channels=10, kernel_size=5, stride=1) self.conv2 = nn.Conv2d(10, 20, kernel_size=5) self.conv2_bn = nn.BatchNorm2d(20) self.dense1 = nn.Linear(in_features=320, out_features=50) self.dense1_bn = nn.BatchNorm1d(50) self.dense2 = nn.Linear(50, 10) def forward(self, x): x = F.relu(F.max_pool2d(self.conv1(x), 2)) x = F.relu(F.max_pool2d(self.conv2_bn(self.conv2(x)), 2)) x = x.</description>
    </item>
    
    <item>
      <title>「日本古典籍字形データセット」で遊ぶ</title>
      <link>http://mosko.tokyo/post/mnist_kuzushiji/</link>
      <pubDate>Fri, 13 Jan 2017 13:18:40 +0900</pubDate>
      
      <guid>http://mosko.tokyo/post/mnist_kuzushiji/</guid>
      <description>日本語版MNIST,というわけではないけれど日本古典籍字形データセットの識別をkerasで実装したresnetによって行った．現在validation accuracyは93.3%．少なくとも自分よりはきちんと分類できるようだ．
このデータセットには2017年1月現在，「8点の画像データから切り取ったくずし字1,521文字種の字形データ86,176文字」が収録されているので，そのまま1521に分類している．
今回はMNIST的に使うので，つまり文脈を考慮しないので変体仮名の「志」（し）と漢字としての「志」とを区別する，というようなタスクも含まれてしまうが，特に考慮しない．kerasのImageDataGeneratorで前処理を一括して行う．本当はもう少し丁寧にした方がいいのかもしれないけれど，とりあえず．
 # data generator train_datagen = ImageDataGenerator( shear_range=0.05, width_shift_range=0.05, height_shift_range=0.05, rotation_range=10, fill_mode=&amp;quot;constant&amp;quot;, cval=200, zoom_range=0.2) train_generator = train_datagen.flow_from_directory( &#39;train&#39;, color_mode=&amp;quot;grayscale&amp;quot;, target_size=target_size, batch_size=batch_size, class_mode=&#39;categorical&#39; ) val_datagen = ImageDataGenerator() val_generator = val_datagen.flow_from_directory( &#39;val&#39;, color_mode=&amp;quot;grayscale&amp;quot;, target_size=target_size, batch_size=batch_size, class_mode=&#39;categorical&#39; )  training dataには変形を施した．resnetはkeras.jsを参考にして実装(下記のres_a,res_b)．
# model input_layer = Input(shape=input_shape) x = Convolution2D(nb_filters, 4, 4, subsample=(2,2))(input_layer) x = BatchNormalization()(x) x = Activation(&#39;relu&#39;)(x) x = MaxPooling2D(pool_size, strides=stride_size)(x) x = res_a([32,32,128])(x) x = res_b([32,32,128])(x) x = res_b([32,32,128])(x) x = res_a([64,64,256])(x) x = res_b([64,64,256])(x) x = res_b([128,128,256])(x) x = res_a([128,128,512])(x) x = res_b([128,128,512])(x) x = res_b([256,256,512])(x) x = AveragePooling2D((4,4))(x) x = Flatten()(x) output_layer = Dense(nb_classes, activation=&#39;softmax&#39;)(x) model = Model(input=input_layer, output=output_layer) model.</description>
    </item>
    
    <item>
      <title>dotfilesを公開</title>
      <link>http://mosko.tokyo/post/dotfiles/</link>
      <pubDate>Sat, 12 Nov 2016 01:11:08 +0900</pubDate>
      
      <guid>http://mosko.tokyo/post/dotfiles/</guid>
      <description>研究室の人々もすなるdotfilesなるものを，我も公開してみんとてするなり．それの年のかむなつきの廿日あまり一日の，戌の時に部屋の人のいふやう，「dotfilesを見せよ」．
公開して，人のdotfilesを見るようになると段々充実してきて諸々使いやすくなった一方忘れやすくもなったので備忘録をば．
Vim(NeoVim) 新しいもの好きなのでNeoVim ，プラグインマネージャーとしてdein.nvimを使っている．
denite.nvim dein.nvimの設定ファイルに
 [[plugins]] repo = &#39;Shougo/denite.nvim&#39;  を追加する．基本的にここを参考にしてマッピングした．&amp;lt;C-u&amp;gt;&amp;lt;C-g&amp;gt;でgrepによるファイルの検索のようなことが高速に行える．
vim-easy-align  [[plugins]] repo = &#39;junegunn/vim-easy-align&#39;  Githubを見れば一目瞭然なのだが，gaで起動するように設定しておくだけで，vipga=のみで上から下を実現する．
 apple = red sky = blue banana=yellow --------------- apple = red sky = blue banana = yellow  ともかく上記のREADMEが非常に充実しているのでこれを見る．
misc  &amp;lt;C-v&amp;gt;でヴィジュアルモードに入り，範囲選択してI#で選択した行のコメントアウト．  tmux どうして今まで知らなかったのだろう，tmux．
さまざまな機能があるけれども，サーバとのsshの接続を切ってしまってもプロセスを動かし続けることが出来る，というのがいちばんありがたい．それまでは時間のかかるプロセスを動かしてしまった日はノートパソコンが据え置き機と化してしまっていた．
tmux aで前回のセッションにつないで，tmux上でCtrl+dで離れる．プレフィックスキーはzshのCtrl+aを多用するので標準のCtrl+bのままにしてある．マウス/タッチパッドの使用を有効にする設定がバージョンによって違うのでそれが多少厄介で，今回のdotfilesではtmuxディレクトリを作っておき，バージョンによって読み込むファイルを変えることで解決している．</description>
    </item>
    
    <item>
      <title>scikit-learn, Xgboost そしてTensorFlow</title>
      <link>http://mosko.tokyo/post/on-sklearn-xgboost-and-tensorflow/</link>
      <pubDate>Sat, 29 Oct 2016 00:16:01 +0900</pubDate>
      
      <guid>http://mosko.tokyo/post/on-sklearn-xgboost-and-tensorflow/</guid>
      <description>新しいもの好きなので色々と触ってはみるものの，必要とならないと理解しようとしないので結果的には無駄に時間を使ってしまう．研究でPythonの機械学習・ディープラーニングライブラリに触っているので備忘録に．
scikit-learn scikit-learn a.k.a. sklearnは機械学習のライブラリで，多くの機械学習アルゴリズムが収録されている．機械学習プロパーの人からすると色々問題もあるのかもしれないが，とりあえず色々な手法が同じような書き方で使えるのはありがたい．とはいいながら，結局今回使っているのはSVMとRandom Forestだけなのだけれど．
from sklearn import svm svc = svm.SVC(kernel=&#39;linear&#39;) svc.fit(train_X,train_Y) predict_Y = svc.predict(test_X)  これだけ．あと便利なのがclassification_reportとGridSearchCV．
from sklearn.metrics import classification_report print(classification_report(test_Y, predict_Y))  で
 precision recall f1-score support 0.0 0.56 0.96 0.71 364 1.0 0.87 0.24 0.38 364 avg / total 0.72 0.60 0.55 728  まで表示される．グリッドサーチの方はクロスバリデーション付きで以下のように使う．n_jobsは使用するCPU数で，-1のときは全CPUを使って並列で処理を進めるので，モデルによっては注意が必要．今回はCPUはよいのだけれども，並列で処理するためかメモリを相当喰っている印象を受けた．
from sklearn.model_selection import GridSearchCV tuned_parameters = [{&#39;kernel&#39;: [&#39;poly&#39;,&#39;linear&#39;], &#39;gamma&#39;: [1e-3, 1e-4], &#39;C&#39;: [0.1,1,10]}] gsc = GridSearchCV(svm.SVC(), tuned_parameters, cv=5, scoring=score, n_jobs=-1) gsc.</description>
    </item>
    
    <item>
      <title>Juliaに触ってみた</title>
      <link>http://mosko.tokyo/post/julia-boxmuller/</link>
      <pubDate>Sun, 23 Oct 2016 22:36:34 +0900</pubDate>
      
      <guid>http://mosko.tokyo/post/julia-boxmuller/</guid>
      <description>我らがJupyterのJu,であるところのJupyterに触って，IPythonに相当するIJuliaを導入してJupyterから操作してみた．ちょっと触った感想は，強いR-lang．
IJuliaの導入． Juliaは ここから導入する．ターミナルから開いて，
 Package.add(&amp;quot;IJulia&amp;quot;) using IJulia notebook()  これでJupyterが起動する．あとは普段通り．
触る． 折角なので手元にあったPRMLにあった，一様乱数からガウス分布を得るBox-Muller法によって得られる分布をプロットする．以下ではプロットツールのGadflyを用いている．
using Gadfly set_default_plot_size(10cm,10cm); # Box-Muller法 function box_muller(num) x = [] y = [] for i = 0:num a = rand() b = rand() η = 2a -1 #1 ζ = 2b -1 r2 = η ^ 2 + ζ ^ 2 if (r2) &amp;lt;= 1 x = push!(x, η * √(-2 * log(r2) / r2)) #2 y = push!</description>
    </item>
    
    <item>
      <title>PythonでMySQLを使う</title>
      <link>http://mosko.tokyo/post/python-and-mysql/</link>
      <pubDate>Sat, 22 Oct 2016 00:21:34 +0900</pubDate>
      
      <guid>http://mosko.tokyo/post/python-and-mysql/</guid>
      <description>現在開発しているものはScalaで前処理を行っているので，本番の処理も本当は全部Scalaで書ければよかったのだけれども，そうは問屋が卸さず，種々の原因によりPythonが必要になってしまった． これなら最初から全部Pythonでよかったのでは，とも思うけれど，PythonはJupyterで小さなものを色々弄るのには使うものの，大きいものをPythonで書いた経験が無いので心配．型が違う，という注意が沢山出そうだ．
ともかく，そのためにPythonからMySQLを扱う必要が出てきた．Pythonists3は新しいもの好きなのか，いまやNoSQLを使うのがトレンドなのか，MySQL周りの情報が少ないのだが，pymysqlを使うことに落ち着いた．
connection = pymysql.connect(host=&amp;quot;HOSTNAME&amp;quot;, user=&amp;quot;USERNAME&amp;quot;, password=&amp;quot;PASSWORD&amp;quot;, db=&amp;quot;DB_NAME&amp;quot;, charset=&#39;utf8&#39;, cursorclass=pymysql.cursors.DictCursor) #1 with connection.cursor() as cursor: sql = &amp;quot;SELECT name FROM table WHERE id=%s&amp;quot; cursor.execute(sql, (900)) results = cursor.fetchall() for r in results: b = r[&#39;name&#39;] print(bytes.decode(b)) #2  #1を指定することで，返ってくる結果がdict形式になって分かりやすい．
最後，#2でnameに相当する列がvarbinaryであったので，文字列に変換するのにbytes.decode()が必要だった．とりあえずこれで一件落着．</description>
    </item>
    
    <item>
      <title>TensorflowでCNN入門</title>
      <link>http://mosko.tokyo/post/started-cnn-with-tensorflow/</link>
      <pubDate>Wed, 19 Oct 2016 20:04:20 +0900</pubDate>
      
      <guid>http://mosko.tokyo/post/started-cnn-with-tensorflow/</guid>
      <description>いよいよDeep Learningからは逃れられない運命，真剣に向かい合わざるを得ないことを悟り，TensorFlow Tutorial-used by Nvidiaを始めた．
前半は実は正しくなくて，今までも何度かTensorflowのTutorialを触ったものの，また，TensorFlowやChainerを使ったものの，まったく理解できないまま終わってしまっていた．
今回は偶然にも前述のTutorialと出逢うことが出来たので試してみた．
環境構築 細かいことは考えずにAnacondaを入れてしまうのが早い．基本的なパッケージは揃っているし，IntelのMKLが使えるNumpyなども特に設定せずに導入できる．導入後，
conda update --all conda install tensorflow  を行えば終了．ではあるが，GPUを使いたい場合は公式にしたがってpipを叩く必要がある．なお，このTutorialはPython2向けに書かれているので，すでにAnaconda py35を入れてしまっている場合には
conda create -n py27 python=2.7 anaconda source activate py27  が必要となる．pyenvを使うと環境への影響が少ないのだけれど，自分の環境ではAnacondaのIntel Math Kernel Libraryが上手く動かないようなので使っていない．
Tutorial Tutorial Lab2．Jupyter Notebookの偉大さが分かる．
構成もよく出来ていて，MNISTをMulti-Layer Parceptronで解く，Convolutional層を追加する，Pooling層を追加する，重ねてみる，Dropoutも追加してみる，というような流れなのでそれぞれの層の意味がよく理解できるし，岡谷先生の本ではそうかそうか，と式だけ追っていたようなことが目に見える形で現れるのは純粋に楽しいので捗るし，理解が深まる．
MNISTなので上手くいって当然なのだろうけれど，試行錯誤していくと正答率があがって過学習が減っていくのは面白い．
{% asset_img mnist.png 最終結果 %}
チャネル数 途中で，channels，チャネル数がよく分からなかったのだけれども，岡谷先生の本が参考になった．入力がRGB画像の場合は入力層の場合はチャンネル数はRGBの3である．ここで，チャンネル数 $K$ ,大きさ $W\times W$ であるものを $W\times W\times K$ と表すこととする．
いま，Convolutional層の入力のサイズを$W\times W\times K$，$m$種類のフィルターのサイズを$H\times H\times K$とすると，
$$
u_{ijm}=\sum_{k=0}^{K-1}\sum_{p=0}^{H-1}\sum_{q=0}^{H-1}z_{i+p,j+q,k}^{(l-1)}h_{pqkm}+b_{ijm}
$$
畳み込み層の出力としてはこれに活性化函数を適用した $z_{ijm}=f(u_{ijm})$ が得られる．したがって，$W\times W\times K$であった入力は，出力時には$W\times W\times M$となっている．この$M$が次の層ではチャネル数となる．ということのようだ．</description>
    </item>
    
    <item>
      <title>イタリア旅行記補遺(1)</title>
      <link>http://mosko.tokyo/post/italy-misc/</link>
      <pubDate>Sun, 09 Oct 2016 23:51:10 +0900</pubDate>
      
      <guid>http://mosko.tokyo/post/italy-misc/</guid>
      <description>補遺というか，備忘録のようなもの．
スイスアーミーナイフは没収される 一昨年フランスに行った際にもうっかり手荷物の中にスイスアーミーナイフが入ったままになってしまっていて，シャルルドゴールで申告したところ刃渡りが短いのでそのまま持ち込みを許可された．
今回はすべて手荷物であったので，成田国際空港でもスイスアーミーナイフもそのまま持ち込もうとした．ところが，例に倣って申告したところ没収され処分されてしまった．段々と取り締まりが厳しくなっていて，折角小型のマルチツールなのに携帯できないとは不便な世の中である．
スマートフォンアプリケーション 今回の旅行ではSIMフリー端末に，VodafoneのSIMをさして使ったので，どこでもスマートフォンが使えて快適であった．
以下使用したアプリケーションなど．
Google Map 言わずと知れたGoogle Map．日本国内では使えない機能だが，少なくともイタリアでは地図をダウンロードしておくことが可能なので，予め訪問する予定のある地域の地図を用意しておくと困らない．
Train Timetable Italy Train Timetable Italyはイタリアの鉄道時刻表アプリで，旧国鉄のTrenitaliaの公式アプリよりも便利である気がする．遅延状況なども分かるのでインストールしておいて損はないだろう．
Google Trips Googleの旅行アプリケーションで，滞在途中で知ったのだが，詳しい上に最新の情報も分かるのでもう**の歩き方は要らないかもしれない．利用者の好みに合わせた旅行プランを提案してくれるが，今回は先述の通りで，Milanoでしか使えていないのだが「教会を見て回る」，という項目があり重宝した．
Secure Wireless Secure WirelessはVPNアプリケーションで，1月350円で安定して速度も出るので，フリーのWifiに何もせずに繋ぐのも怖いので旅行中に使っている．
![Secure Wireless](https://lh6.ggpht.com/Cjc0Fqw-kmeJhw7AnTVjwo89fRFzcyjlwCEKZapx8-0tcy6meD8105dwNTyUmuh3LIc=h500</description>
    </item>
    
    <item>
      <title>MeCabのJavaバインドをIntelliJで使う．</title>
      <link>http://mosko.tokyo/post/use-mecab-java-with-intellij/</link>
      <pubDate>Sat, 08 Oct 2016 19:57:29 +0900</pubDate>
      
      <guid>http://mosko.tokyo/post/use-mecab-java-with-intellij/</guid>
      <description>MeCabのJavaバインドのセットアップ MeCab公式からJavaバインドをダウンロードし，解凍する．Linuxであればこのままmakeなのだが，macOSであれば， MeCab のJava バインディングをMacOSX10.8.3(Mountain Lion) でScala から使うを参考に，Makefileを書き換えてmake．
 xcode-select --installを実行し，xcodeのコマンドラインツールを導入する．
 Makefileのスペースをタブで置き換える．
  必要があった．ここで
javac org/chasen/mecab/*.java  などを試す．エラーが出なければ，インストールは出来ているはず．
IntelliJで使う． stackoverflowにあった通りなのだが，run/debug congfigurationのJava
 VM option: -Djava.library.path=&amp;quot;/usr/local/bin/mecab-java&amp;quot;  とする必要があった．これがないと，以下のエラーが生じる．
 Exception in thread &amp;quot;main&amp;quot; java.lang.UnsatisfiedLinkError: no MeCab in java.library.path at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1867) at java.lang.Runtime.loadLibrary0(Runtime.java:870) at java.lang.System.loadLibrary(System.java:1122) at Mecab_test$.main(Mecab_test.scala:11) at Mecab_test.main(Mecab_test.scala) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)  はじめ，java.library.pathというのは環境変数で設定するものと思って苦労した</description>
    </item>
    
    <item>
      <title>イタリア旅行記8日目</title>
      <link>http://mosko.tokyo/post/italy8/</link>
      <pubDate>Fri, 07 Oct 2016 00:46:48 +0900</pubDate>
      
      <guid>http://mosko.tokyo/post/italy8/</guid>
      <description>とうとう愛しのBolognaを去って，LombardiaはMilanoへ向かう．意外なことに，イタリアの鉄道は安定していて，滞在中は殆ど遅延に合うこともなかった．
Milanoに近づいて行くにつれて，1週間見ることのなかった近代的な高層建築が増えてくる．駅も驚くほど大きい．駅から出ると，セルカ棒を売る胡乱な人々が多数現れる．BolognaやFirenzeよりも品揃えがよく，モバイルバッテリーなども売っている．

はじめ中心部のMilano大聖堂に向かったところ，当然ながら大混雑であったのでSforzesco城に向かった．

この地を治めていたMilano公のSforza家が15世紀に建てたもので，今は美術館などが入っている．この日は祭りも開かれていた．この城を抜けると凱旋門まで公園が広がっている．


San Maurizio教会．もとはBenedictus会系の尼門跡のような女子修道院であったためか，壁画が充実している．



Milano自体，古代にさかのぼる古い町だが，Basilica di San Lorenzoも5世紀前半には創立されていた古い寺院である．境内にはConstantinus帝が．

mosaicは古代から色褪せることなく美しさを保存してくれるが，それでも人々が常に手入れをし続けなくてはいけないことが分かる．特にRavennaの奇跡を今に伝え続けてきた無名の人々に圧倒的感謝．


Basilica of Sant&amp;rsquo;Eustorgio．規模は大きいが，薄暗くあまり豪華ではない．


過去の栄光が偲ばれる．


Basilica di Sant&amp;rsquo;Ambrogio．Milano最古の教会で古くからのものが残っており，面白い．AmbrosiusはTheodosius帝がThessalonicaの虐殺を行ったときに，皇帝を破門して改悛を求め教会の権威を高めたMilano司教である．この教会の地下に今でも眠っており，それを見ることも出来る．


左側の説教壇の下には石棺があり，これが面白い．まだCatholicが成立する過程なのだろう，異教的な雰囲気も残る．


礼拝堂にはmosaicが施されている．

昼間には行列が出来ていたMilano大聖堂も，夕方になると殆ど並ばずに入れる．並んでいるのは治安部隊による金属探知機による検査と手荷物検査とがあるため．建設が始められたのは14世紀だが，完成したのは500年後にNapoleon Bonaparteの指示があってからである．
柱も太く，天井も非常に高い．内部は装飾に溢れているわけではないがMilanoの力を感じる教会である．</description>
    </item>
    
    <item>
      <title>イタリア旅行記7日目</title>
      <link>http://mosko.tokyo/post/italy7/</link>
      <pubDate>Wed, 05 Oct 2016 21:21:06 +0900</pubDate>
      
      <guid>http://mosko.tokyo/post/italy7/</guid>
      <description>Emilia-Romagnaに来て結局はToscanaに通っていた，というのは癪なのでこの日はParmaとModenaに行く．ParmaやModenaは，特に中年以上の人にはあまり英語が通じていない気配があり，“Ciao”，“Grazie”でわかり合うしかないが大体問題は無い．
ParmaはBolognaからは1時間程度，観光客も疎らな静かな街である．古代以来の街で，Napoleon1世皇后のMarie LuiseがParma公であったこともある．
Palazzo della Pilotta 16世紀にParma公によって建築が始められた宮殿で，現在は美術館やFarnese劇場が入っている．

美術館には古代，中世から近代にいたるまでの作品が収められている．

Parmigianinoのトルコ人奴隷．

Cattedrale di Santa Maria Assunta Parma大聖堂．天井にも所狭しと細かく装飾が施されており非常に豪華である．



Correggioによる聖母被昇天．


教会前の広場に面して洗礼堂もあり，これも面白い．何と言うことか，Parmaでは聖堂と洗礼堂の外観全体を撮影していなかったのだが，洗礼堂の外観はけっこう現代的である．

一方で天井，壁はfresco画に覆われている．

怪物だと思っていたのだが，もしかして獅子なのでは．

ところどころには彫像もある．それにしても熾天使は面白い．特に右側は福音書記者の顔である．


Parmaはまた食の都でもあって，Parma hamなどでも知られる．

Modenaも適当な大きさの街である．ParmaとBolognaの間にある．イタリアの鉄道は，切符を有効化した後4時間使えるので，帰り際にささっと見ることが出来る．
cattedrale metropolitana di Santa Maria Assunta in Cielo e San Geminiano Modenaの大聖堂．romanesque,gothic様式の融合した傑作として世界遺産にも登録されている．



由緒がありそう．


装飾も面白い．

このように中身に気をとられているうちに，電車の時刻が近づいてしまい余り外観を楽しむことなく立ち去らざるを得なかったのが心残り</description>
    </item>
    
    <item>
      <title>JUMAN&#43;&#43; on Ubuntu</title>
      <link>http://mosko.tokyo/post/juman-install/</link>
      <pubDate>Wed, 05 Oct 2016 14:40:43 +0900</pubDate>
      
      <guid>http://mosko.tokyo/post/juman-install/</guid>
      <description>日本語形態素解析には MeCabを使ってきたが，京大の JUMAN++が進化してWikipediaやWiktionaryの用語を取り込んでMeCabを追い越した，とのことなのでインストールしてみた．
インストール  必須ライブラリ
 gcc (4.9+)
 Boost C++ Libraries (1.57+)
  推奨ライブラリ
 gpreftool
 libunwind(gpreftoolを64bit環境で使用する場合)
   gccと推奨ライブラリはapt-get installで導入できたのだが，Boostはapt-getでは1.57以上が入らなかったので，boost.orgから最新版を解凍して
cd boost_* sudo ./bootstrap.sh --prefix=&amp;lt;INSTALL_PATH&amp;gt; sudo ./b2 install export PATH=$PATH:&amp;lt;INSTALL_PATH&amp;gt;/include/:&amp;lt;INSTALL_PATH&amp;gt;/lib/ export BOOST_ROOT=&amp;lt;INSTALL_PATH&amp;gt;  続いて，JUMAN++をダウンロードし，解凍する．
cd jumanapp-1.0* ./configure --with-boost=&amp;lt;INSTALL_PATH&amp;gt; sudo make install  こうして，jumanappが使えるようになる．
比較 JUMAN++
 入り口から入って振り返ると，善き羊飼いとしてのキリストの図像がある． 入り口 いりぐち 入り口 名詞 6 普通名詞 1 * 0 * 0 &amp;quot;代表表記:入り口/いりぐち カテゴリ:場所-その他&amp;quot; から から から 助詞 9 格助詞 1 * 0 * 0 NIL 入って はいって 入る 動詞 2 * 0 子音動詞ラ行 10 タ系連用テ形 14 &amp;quot;代表表記:入る/はいる 自他動詞:他:入れる/いれる 反義:動詞:出る/でる&amp;quot; 振り返る ふりかえる 振り返る 動詞 2 * 0 子音動詞ラ行 10 基本形 2 &amp;quot;代表表記:振り返る/ふりかえる&amp;quot; と と と 助詞 9 格助詞 1 * 0 * 0 NIL ， ， ， 特殊 1 読点 2 * 0 * 0 NIL 善き よき 善い 形容詞 3 * 0 イ形容詞アウオ段 18 文語連体形 21 &amp;quot;代表表記:良い/よい 反義:形容詞:悪い/わるい&amp;quot; @ 善き よき 善い 形容詞 3 * 0 イ形容詞アウオ段 18 文語連体形 21 &amp;quot;代表表記:良い/よい 反義:形容詞:悪い/わるい&amp;quot; 羊飼い ひつじかい 羊飼い 名詞 6 普通名詞 1 * 0 * 0 &amp;quot;代表表記:羊飼い/ひつじかい カテゴリ:人&amp;quot; と と と 助詞 9 格助詞 1 * 0 * 0 NIL して して する 動詞 2 * 0 サ変動詞 16 タ系連用テ形 14 &amp;quot;代表表記:する/する 付属動詞候補（基本） 自他動詞:自:成る/なる&amp;quot; の の の 助詞 9 接続助詞 3 * 0 * 0 NIL キリスト キリスト キリスト 名詞 6 普通名詞 1 * 0 * 0 &amp;quot;自動獲得:Wikipedia Wikipedia多義&amp;quot; の の の 助詞 9 接続助詞 3 * 0 * 0 NIL 図像 ずぞう 図像 名詞 6 普通名詞 1 * 0 * 0 &amp;quot;代表表記:図像/ずぞう カテゴリ:抽象物 ドメイン:文化・芸術&amp;quot; が が が 助詞 9 格助詞 1 * 0 * 0 NIL ある ある ある 動詞 2 * 0 子音動詞ラ行 10 基本形 2 &amp;quot;代表表記:有る/ある 補文ト 反義:形容詞:無い/ない&amp;quot; ． ． ． 特殊 1 句点 1 * 0 * 0 NIL EOS  MeCab</description>
    </item>
    
    <item>
      <title>イタリア旅行記6日目</title>
      <link>http://mosko.tokyo/post/italy6/</link>
      <pubDate>Tue, 04 Oct 2016 08:34:59 +0900</pubDate>
      
      <guid>http://mosko.tokyo/post/italy6/</guid>
      <description>結局3日連続でFirenzeに通ってしまう．これならばはじめからFirenzeに宿を取ればよかったのだが，世界的の観光地であるFirenzeよりもBolognaの方が金銭的に過ごしやすいだろう，ということでBolognaにある宿を予約していたのであった．
実際には，特に食事面に関して言えば，Firenzeの方が選択肢が多いぶん，良さそうであった．しかしながら，Bolognaの方が落ち着いた街であるので，穏やかに滞在するには向いていた気がする．
Basilica di San Marco San Marco教会に修道院の美術館が付属しており，特にFra Angelicoの絵が多い．途中MichelangeloのDavidの像で有名なAcademia美術館の側を通るが，流石に人気でイタリアで見た一番の混雑であった．


Altare Nettoli Becchi, Jacopo di Cioneの受胎告知．

修道院の居住空間にあるFra Angelicoの受胎告知．別途，絵画の展示室もあるが，アクリルパネルで保護されており，光ってしまってよく見えないものも多くて残念であった．

修道院の居住空間．それぞれの個室には磔刑図などが描かれている．かつてここでSavonarolaも共同生活をしていたらしい．
個室はそれなりには広いので，修道院を改築した宿泊施設があるのも納得である．

Basilica di San Lorenzo Firenze最古の教会の一つで，Medici家の菩提寺としてBrunelleschiによって改築されたが彼の死によって未完成に終わっている．他のFirenzeの寺院と異なり，façadeがないのはそのためか．Medici家礼拝堂が付属している．



天井を星空に見立てる例はRavennaでも見たが，このように星座を描き込んでいるのは初めて見る．

付属の図書館はMichelangelo設計で，この階段は特に時代を先取りしていたらしい．

ここでFirenzeを離れ，近郊のPratoに移動した．Pratoは織物生産が盛んで，イタリアのManchesterと称されたこともあるらしいが，少なくとも訪れた旧市街は観光客も疎らな落ち着いた街という印象を受けた．Pratoの大聖堂の壁画をFilippo Lippiが担当し，息子のFilippinoはPratoで生まれたためか，街の美術館には親子の作品がある．
Museo Civico di Pratoにある，Filippoらによるキリスト生誕．

不明．ちょっと妖艶な感じ．

Giovanni Bilivertの受胎告知．聖母が左にいるものは珍しい気がする．

美術館からの風景．

Duomo di Prato 10世紀には存在したが，現在の建物は12世紀に建てられたRomanesqueの様式．外にも説教台がついているのが特徴的である．聖母の腰紐，という信者でないものには有り難みの分からない聖遺物を保有している．

Filippo Lippiが描いた壁画も見られる．珍しく後陣(主礼拝堂？)にまで入れるので，壁画を間近で眺めることが出来る．



地下は展示施設になっており，かつての礼拝堂などもある．

Castello dell&amp;rsquo;ImperatoreというFriedlich2世によって建てられた城というか砦もあるが，彼の死によって未完成に終わっている．
&amp;lt;/script</description>
    </item>
    
    <item>
      <title>イタリア旅行記5日目</title>
      <link>http://mosko.tokyo/post/italy5/</link>
      <pubDate>Mon, 03 Oct 2016 21:52:14 +0900</pubDate>
      
      <guid>http://mosko.tokyo/post/italy5/</guid>
      <description>この日もFirenzeに通う．天気予報では雨と言うことであったので，美術館巡りをしようかと思っていたが，幸いなことに結局は晴天であった．
La Galleria degli Uffizi Uffizi美術館．uffiziは英語のoffice(offices)の語源だそうである．“grazie”が“grace”と対応するだろうことを考えると，この対応には納得がいくだろう．
美術館には長蛇の列ができるが予約が可能，ということであったので，とりあえず10時からの分を予約したのだが，これは10時から入れる，と言うわけではなく10時頃に優先入場の列に並ぶことが出来る，という程度のものであった．しかしながらそれでも非優先の列に較べるとかなり素早く入れるので，混む時間帯に行くのであれば買った方がよいだろう．なお，4時頃だとFirenze Cardですっと入ることが出来る．
また，展示品全てが見られるわけではない点にも注意が必要で，日によって入れる部屋が違うようなのでどうしても見たい作品がある場合は通うか，調べてから行った方がよいだろう．
写真の右手に見えるのがUffizi美術館で，もともとCosimo de’ Mediciがお気に入りの建築家に巨大な宮殿として作らせたのが始まりである．川沿いの地盤の悪い場所にこれほど大きなものを建てるのは大変であったらしい．その後Toscana大公によって美術館として一般に公開されるようになった．

元来は宮殿であったので展示品自体もすばらしいのだが，建物の装飾もまた眺めていて飽きない．基本的にgrotesque．



Simone MartiniとLippo Memmiの受胎告知．中世絵画の延長であるSienaの絵画の頂点にあり，中世の雰囲気を残しながらも特に表情が精緻に描かれている．Gabrielから言葉が出ているのもよくある表現ではあるが面白いし，Mariaの避けるような驚くような素振りと相貌も印象的である．


Paollo UccelloのSan Romanoの戦い．lanceの入り乱れる戦いの模様である．


Filippo Lippiの二天使と聖母子像．Filippoは僧侶であったのにもかかわらず尼であったLucreziaと駆け落ちして結婚した話は有名であるが，この聖母は彼女を描いたものではないか，とも言われる．また，手前の天使の顔は息子のFilippinoではないか，とも言われている．聖母の髪や髪飾りに並々ならぬ情熱をかけたであろうと思いながら眺めた．

da Vinciの受胎告知も間際まで寄ることが出来る．

Gherado delle nottiの幼キリスト礼拝．本当にキリストから光が発せられているかのよう．

Venusの誕生．

CaravaggioのMedusaの楯．

La Galleria Palatina e gli Appartamenti Reali Pitti宮の2階の左翼は，大公一家の居住空間が美術品の展示室となって公開されている．RaffaelloやCorreggio，Rubensらの作品が所狭しと並べられている．時間に余裕がなかったのでじっくりと眺めることが出来ず，残念．

この時には美術品に混じって，Chanelの写真も展示されていた．


Battistero di San Giovanni 洗礼堂である．イタリア人にとっては，ここを訪れて“il mio bel San Giovanni”という神曲地獄篇第19歌の言葉を思い出すことは容易であるようだ．つまり，地獄第8圏における聖職売買者の落ちる地獄の，罪人の入るべき穴について
 思ふにこれらは授洗者の場所としてわが美しき聖ジョヴァンニの中に作られしもの
より狭くも大きくもあらざりしなるべし
** 山川丙三郎訳 **
 19世紀までは全Firenzeの信徒はここで受洗したようだが，今は幼児の受洗に限られている模様．</description>
    </item>
    
    <item>
      <title>イタリア旅行記4日目</title>
      <link>http://mosko.tokyo/post/italy4/</link>
      <pubDate>Sun, 02 Oct 2016 11:15:13 +0900</pubDate>
      
      <guid>http://mosko.tokyo/post/italy4/</guid>
      <description>華の都，頽廃の都．Fiorenzaへ．
Firenzeには幾つか駅があるのだが，Bologna発の電車は主にFirenze Santa Maria Novella駅に到着する．BolognaやRavennaと較べると，ローマからも近く，世界的な観光地であるから人が圧倒的に多くて驚く．駅の名前通り，駅前にはSanta Maria Novella教会がある．
Santa Maria Novella Dominico会系の教会．

墓碑の並ぶ回廊．往時の繁栄が偲ばれる．


礼拝堂．壁天井にいたるまで絵で覆い尽くされていて，豊かさを感じる．

ｓ
聖堂．縞模様の大理石が美しい．


Chiesa di Santa Maria Maggiore Firenzeの大聖堂に向かう途中で見かけた小さな教会．落ち着いた感じでよい．


Firenze Card Firenzeの72の博物館や教会が72時間使えて€72，というカードを購入して巡った．優先入場権がついているので，混んでいる入り口でもこのカードを見せるだけですぐには入れることがある．
美術館，教会などの施設でこのFirenze Cardを示すと，Suicaが使える検札器のような装置で読み取ってレシートが発行される．大きな施設ではFirenze Cardと書かれた受付に行き発行して貰う．施設内ではカードではなく，このレシートを見せることになる．Pitti宮のように巨大な施設には複数の付属施設があるが，一度にそれらを回りきれるとは限らない．有効期限内であれば，そのレシートを見せることで見ていない付属施設に入場できるので，小さな紙切れではあるがなくさないようにした方がよい．
注意事項として，公共交通機関が乗り放題になる訳ではない，ということがある．購入時に渡される地図にはバスのアイコンが描かれているのでバスも72時間乗り放題かと思いきやそんなことはない．
知らずにバスに乗っていると抜き打ちで検査があって引っかかると罰金を払う羽目になる．結構頻繁にあることなのか，「またFirenze Cardだよ」というような話をしているように見えたので，最近改訂があったのかもしれない．
Mercato Centrale 1階は地元の人も使うだろう市場．野菜，肉，チーズ，パンから調味料まで，食料品は何でも揃いそう．日本人も大勢訪れるようで，調味料売り場には「真空パックできます」などという表示もある．


2階はフードコートが揃っている．ステーキを食べた．

Le Cappelle Medicee Medici家の礼拝堂で1階が博物館になっており聖遺物の容器などが展示されている．2階の礼拝堂の天井以外は工事中．

Michelangeloによる墓碑などもある．

Il Duomo di Firenze: Cattedrale di Santa Maria del Fiore Filippo Brunelleschiが設計したcupolaはFirenzeの象徴で，登ることが出来るのだが長蛇の列ができている．また，人が多く集まるため聖堂前では軍が警備を行っている．



Palazzo Pitti Arno川を渡った先にある，Pitti宮はToscana大公の離宮として建てられ，美術品の蒐集品が充実している．また庭園が高台に沿って造営されているため，登りきると街が一望できる．</description>
    </item>
    
    <item>
      <title>イタリア旅行記3日目</title>
      <link>http://mosko.tokyo/post/italy3/</link>
      <pubDate>Sat, 01 Oct 2016 13:03:11 +0900</pubDate>
      
      <guid>http://mosko.tokyo/post/italy3/</guid>
      <description>この日はRavennaに向かった．早朝，Bologna始発の電車に揺られてしばらくすると，ちょっと柄の悪そうな高校生達が乗り込んできて，“Chinese&amp;rdquo;と煽ってきたのだが，それ以上のことはなくて，あとは音楽をかけて騒いでいるだけだったので，窓の外を眺めたり，読書をしたりして過ごした．
RavennaはEmilia-Romagna州の東の端にあって，かつては軍港のある街として西ローマ帝国の首都や，東ゴート王国の首都，ビザンツ帝国のRavenna総督府などが置かれ栄えたが，土砂の堆積によって軍港としての機能が失われていき衰退した．しかしながら，こうして重要性が喪失したことによって古代の教会がそのまま保存されることとなったのは，我々にとって実に幸運なことと言える．．
Ravennaは世界遺産こそ多く抱えるものの交通の便がやや悪いために，観光客で混雑するほどではない．その為か分からないが，英語が通じにくく朝食に，と入った駅前のコーヒー店では英語が全く通じずに難儀した．居合わせた学生が“hot”と簡潔に訳してくれたので助かった．

なお今回の旅行に当たっては1を参考としたので，以下の文中でも説明無く使用した．
Basilica di San Vitale チケット売り場が門前町にあるのだが，分かりにくい．8時40分くらいから入り口周辺を巡っていたところ，中から係員が出てきて9時から入れること，チケットが必要なことなどを教えてくれる．しかしながら，チケット販売もきっちり9時から始まるので，本当に9時に入りたいのであれば予めチケットを押さえておく必要があるだろう．
聖VitaleはRavennaを代表する殉教者でこの聖堂は彼に捧げられたものであり，八角形の集中式プランが採用されている．
その点で，モザイクで彩られたAachen大聖堂に似ているのだが，Aachen大聖堂の方が装飾が全体に施されていることと，聖堂前部から入るため後陣まで見渡せ全てが視界に入ってくることから生じるであろう圧倒感に較べると，モザイクがアプシスのみに限られていて，(現在は)横から入ることとなるこの聖堂は入ったときの衝撃の度合いは少ない，かもしれない．


しかしながら，それでも入り口から歩を進めて振り向いたときに現れるモザイクには息をのむものがある．かなり近くまで近づくことが出来る．


大天使，聖Vitalis，司教Eclesiusの中央に坐すキリスト．キリストは支配者として紫色の衣服をまとって，地球儀の上に座し，右手には黙示録の7つの印で封じられた巻物を持つ．地球儀の下にあるうねうねは(楽園の)4つの河川である2．

キリスト，十二使徒と聖Vitalisの殉教した2人の息子．

仔羊を捧げ持つ天使達．

捧げ物，が主題として表されている．こちらはAbelとAbrahamが描かれている側．

Justinianus帝皇妃Theodraとその随員の奉納行列．

Mausoleum di Galla Placidia 聖堂を抜けると，Theodosius帝の娘であるGalla Placidiaの霊廟が見えてくる．もっとも，実際にはあくまでも伝Galla Placidia廟，であるようなのだがガイドブックや建築系の書物などを当たるとGalla Placidiaが葬られているとされている．古くからのモザイクが残る街でも，最も古いモザイクで飾られているという．
建物自体は以下のように十字型の倉庫のようなちっぽけなものであるのだが，内部は3でも絶賛されており今回のRavenna往きの目的の一つでもある．

この本が書かれた1991年には「ラヴェンナの初期キリスト教建築群」は世界文化遺産に登録されていなかったので，著者は入り口を閉じて中の雰囲気を堪能したようだが，今では結構人も訪れるようなので係員にも頼みづらい．しかしそれでも，朝早くから来た甲斐があり10分程度は中に1人でいてあちこちを眺めることが出来た．その後のイタリアでの経験を省みると，ここで頼んでおけばよかったと思う．
入り口から入って振り返ると，善き羊飼いとしてのキリストの図像がある．善き羊飼いとしてのキリストはまた門番であるのでこの場に相応しい．
 この故にイエス復いひ給ふ『まことに誠に汝らに告ぐ、我は羊の門なり。
すべて我より前に來りし者は、盜人なり、強盜なり、羊は之に聽かざりき。
我は門なり、おほよそ我によりて入る者は救はれ、かつ出入をなし、草を得べし。
盜人のきたるは盜み、殺し、亡さんとするの他なし。わが來るは羊に生命を得しめ、かつ豐に得しめん爲なり。
我は善き牧者なり、善き牧者は羊のために生命を捨つ。
 ** ヨハネ伝福音書(文語訳第10章7-11) **

十字交差部の天井は星空である．壁の使徒達は中央の十字架を拝するようなポーズである．残り4人の使徒は福音書記者達で，星空の中にマルコ(獅子)，マタイ(人)，ルカ(牡牛)，ヨハネ(鷲)として表されている，と思っていたのだが実は唐草模様の中に隠れているものがそうらしい．

奥には棺がある．棺の上にいるのは聖Laurentius(聖Lorenzo)で，鉄格子の上で火あぶりになって殉教したという．彼はFirenzeでもよく見られる．

Battistero Naoniano 正教徒洗礼堂の円蓋．


クジャクの図像はあちこちに使われている．

Basilica di San Francesco 水中に見られるモザイク，金魚が泳いでいる．

Dante廟 神曲のDanteは祖国Firenzeを追われ，この地で客死し，今でもこの地に葬られている．何度かFirenzeが返還を求めては断られているらしく，今でも仕方なくランプの油だけを送り続けているとか．</description>
    </item>
    
    <item>
      <title>イタリア旅行記2日目</title>
      <link>http://mosko.tokyo/post/italy2/</link>
      <pubDate>Fri, 30 Sep 2016 12:12:55 +0900</pubDate>
      
      <guid>http://mosko.tokyo/post/italy2/</guid>
      <description>続いて2日目の記事．
2日目は日曜日なので大人しく，中央駅で翌日以降の切符を購入することから始まった．イタリアの公共鉄道の券売機では英語表示も可能で，クレジットカードを使うことが出来て便利である．
イタリア王国建国の英雄であるGaribaldiの像や彼を記念した広場が各地で見られる．これはBolognaのもの．

中世史博物館．キリスト教美術も多いのだが，古くからの大学街とだけあって，大学の風景がレリーフになっていたりするのが興味深い．


墓碑の一部か．本は大学教授の象徴らしい．

街角．Bolognaの中心部はこのようにアーケードのようなものが続いていて，Maggiore広場付近では絵などを売る人がいる．


Santa Maria della vita教会．亡くなったキリストを取り囲む人々が，猛烈に嘆いているようにも或いは遺骸から何か強烈なものが放射されているようにも見える．

聖母被昇天の像がある2階の一室．絢爛豪華の一言に尽きる．


Poggi宮博物館．Bologna大学の施設なのだろうか，人体解剖像や胎児の成長を追った像などがある．かつては貴族や豪族がこのようなものを蒐集していて，それが寄付されたもののようだ．

築城学，というのだろうか，五稜郭のような城を築く学問や軍事系の学問に関するコーナーもある．

Galvaniが動物電気を発見したのもBolognaなのだろう，肖像画や像がある．ちなみに，無線電信を始めたMarconiもBolognaの人で，空港の名前は彼からとられている．

S.Dominico教会．本陣の裏にも入れる．


扉の文様．

もとは宮殿の市庁舎．この部屋も会議室か何かのようで，何気ない部屋にも装飾が施されている．

この日は結構強いにわか雨がありここで終了．一瞬前までセルカ棒を売っていた人々が今度は傘を売り始めた．

&amp;lt;/script</description>
    </item>
    
    <item>
      <title>イタリア旅行記1日目</title>
      <link>http://mosko.tokyo/post/italy1/</link>
      <pubDate>Thu, 29 Sep 2016 21:44:20 +0900</pubDate>
      
      <guid>http://mosko.tokyo/post/italy1/</guid>
      <description>1週間ほどイタリア旅行を行ったので，とりあえず写真に場所のタグ付けをするために1日ずつブログの記事を書いてみよう．
今回のイタリア旅行では，イタリア北部のBolognaに宿泊し，そこから各地に移動した．この地は交通の要衝でもあり，フィレンツェまで40分程度，ミラノまでも1時間程度で乗り換えなしでいける．
Bolognaは欧州最古の大学であるBologna大学を抱え街は中世からの雰囲気を残すが，また一方では美食の有名なイタリアに於いても特に滋味なる物が集まるというEmilia-Romagna州の州都でもあり楽しむべきことは多い．
よく知られているようにイタリアは南部に対して北部が豊かな南北問題を抱えているが，北部にある実際この地域は豊かであることが伺えその為か人々も余裕が親切で，安心感がある．逆にそのように豊かであることが食文化が発展した要員なのかもしれない．
ヨーロッパの他の都市同様，物乞いも，今ではセルカ棒を売る胡乱な人々もそれなりにいるにはいるのだが，彼らですら穏やかであり少なくとも体感的な治安は東京などと変わらないほどであった．24時間無人の飲食できる施設もあったが，毀損はおろか，落書きのようなものすらなかったので治安はそこそこなのであろう．
観光客はヨーロッパの人が殆どで，東洋人すら数組見かけたのみ．そんな場所に1週間も滞在すると結構覚えられていたようだ．もう少し時間があれば馴染みのTrattoriaができたのかもしれない．
さて，Bolognaの中心はMaggiore広場であり市庁舎，巨大なSan Petronio教会などが立ち並んでいる．観光案内所やレストランなども集結しているのでとりあえずここに来れば困らないだろう．なお，私の旅行の常ではあるのだが広場中心のNeptuneの噴水は工事中で見られなかった．

第8代Bologna司教で守護聖人でもあるSan Petronioから名づけられたSan Petronio教会．奥行きが100メートル以上あるBologna最大の教会であり，観光客も数多く訪れるためか警備の薄いBolognaではあるものの緩く警備されていた．


中途半端なファサード．

Bologna大学の校舎．現在でも一部は大学施設として，残りは観光施設として使われている模様で，訪れた際には学生だと思われる人々がパーティーのようなことを行おうとしていた．


世界初の(学術的な，と言う意味だろう)人体解剖が行われたという，解剖学教室もある．皮を剥がれた人の装飾もある．


Santo Stefano教会．装飾も余り残ってなく，かなり古そうで独特の雰囲気がある．よく壊されたり改修されずに済んだものだ．


この赤い石をガラスのように嵌めるのはGalla Placidia廟堂にも見られた．

皇帝党と教皇党との対立華々しき時代に各地で塔が建てられたが，そのうちの数本がBolognaにも残されていて，一部は昇ることが出来る．今回は97mある塔に登った．下から見るといくぶん現代的な建物も屋根は皆赤く統一されているのでこのように高いところからはきれいな町並みを楽しめる．



San Pietro聖堂．


初日は他にVodafoneでSIMカードの契約を行った．国際電話付きのプランしかなくて，LTEのデータ通信3GB分をつけて€30．係員が英語に増えてであったので，広告の€10がなぜ€20も値上がりしたのかがよく分からなかったが聞いてもよく分からない</description>
    </item>
    
    <item>
      <title>Jupyterをサーバー上で使う</title>
      <link>http://mosko.tokyo/post/using-jupyter-on-an-external-server/</link>
      <pubDate>Wed, 31 Aug 2016 18:30:08 +0900</pubDate>
      
      <guid>http://mosko.tokyo/post/using-jupyter-on-an-external-server/</guid>
      <description>2016-08-29 サーバー上のJupyter notebookを使う サーバー上でPythonを実行するのに，ターミナルで弄っていたが何かと不便だったのでJupyterを導入した．
 jupyter notebook --generate-config vim ~/.jupyter/jupyter_notebook_config.py  でjupyter_notebook_config.pyに以下を加える．
 c.NotebookApp.ip = &#39;*&#39; # localhost以外からもアクセス可能にする。 c.NotebookApp.port = 9999 # サーバのポートを指定。デフォルト8888。 c.NotebookApp.open_browser = False # ブラウザが自動で開かないようにする。 c.NotebookApp.notebook_dir = &#39;/home/USER_NAME/notebooks&#39; # 作業ディレクトリを指定。デフォルト起動ディレクトリ。  かくして，jupyter notebookコマンドを叩くとhttp://hoge.hoge:9999でJupyterが扱える．
scikit-learnでのMKLエラー解決 Ubuntuサーバー上のAnaconda3でscikit-learnを動かしたところ
 Intel MKL FATAL ERROR: Cannot load libmkl_avx.so or libmkl_def.so  というような表示が出て終了してしまう．とりあえず
 conda install nomkl numpy scipy scikit-learn numexpr  で解決させたものの，MKL使った方が速そうなので早々に解決したい．MROのMKLが悪かったりするのだろうか．
参考
Jupyter Notebook（IPython）サーバの起動方法</description>
    </item>
    
  </channel>
</rss>